/**
 * @name finalizar-function-calling
 * @version 1.0.0
 * @description
 * Fun√ß√£o que resolve o problema de function calling na API Responses
 * quando o endpoint de tool_outputs ainda n√£o est√° dispon√≠vel.
 * 
 * Estrat√©gia:
 * 1. Busca o hist√≥rico completo da conversation via GET /conversations/{id}/items
 * 2. Envia o hist√≥rico para LLM resumir o contexto de forma inteligente
 * 3. Retorna o resumo para ser usado na cria√ß√£o de uma nova conversation
 */ import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};
serve(async (req)=>{
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      headers: corsHeaders
    });
  }
  try {
    const body = await req.json();
    const { conversation_id, tool_result_message } = body;
    console.log(`[Finalizador] üì• Recebido: conversation_id=${conversation_id}`);
    // Valida√ß√µes
    if (!conversation_id) {
      throw new Error("O 'conversation_id' √© obrigat√≥rio.");
    }
    if (!conversation_id.startsWith('conv_')) {
      throw new Error(`conversation_id inv√°lida (formato esperado: conv_XXX): ${conversation_id}`);
    }
    console.log(`[Finalizador] üîÑ Processando conversation: ${conversation_id}`);
    // ============================================
    // ETAPA 1: Buscar hist√≥rico da conversation
    // ============================================
    console.log('[Finalizador] üì• Buscando hist√≥rico da conversation...');
    const conversationUrl = `https://api.openai.com/v1/conversations/${conversation_id}/items?limit=50`;
    console.log(`[Finalizador] üîó URL: ${conversationUrl}`);
    const historyResponse = await fetch(conversationUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json'
      }
    });
    console.log(`[Finalizador] üìä Status da busca: ${historyResponse.status}`);
    if (!historyResponse.ok) {
      const errorText = await historyResponse.text();
      console.error(`[Finalizador] ‚ùå Erro ao buscar hist√≥rico:`, errorText);
      throw new Error(`Erro ao buscar hist√≥rico (${historyResponse.status}): ${errorText}`);
    }
    const historyData = await historyResponse.json();
    console.log(`[Finalizador] ‚úÖ Hist√≥rico obtido: ${historyData.data?.length || 0} mensagens`);
    // ============================================
    // ETAPA 2: Formatar hist√≥rico para resumo
    // ============================================
    console.log('[Finalizador] üìù Formatando hist√≥rico...');
    let historicoFormatado = '';
    for (const item of historyData.data.reverse()){
      const role = item.role === 'user' ? 'ALUNO' : 'ASSISTENTE';
      // Verificar se content existe e √© um array
      if (!item.content || !Array.isArray(item.content)) {
        console.log(`[Finalizador] ‚ö†Ô∏è Item sem content ou content n√£o √© array:`, item);
        continue;
      }
      for (const content of item.content){
        if (!content || !content.type) {
          console.log(`[Finalizador] ‚ö†Ô∏è Content inv√°lido:`, content);
          continue;
        }
        if (content.type === 'input_text' || content.type === 'output_text') {
          historicoFormatado += `\n[${role}]: ${content.text || ''}\n`;
        } else if (content.type === 'function_call') {
          historicoFormatado += `\n[TOOL CHAMADA]: ${content.name || 'desconhecida'}\n`;
          if (content.arguments) {
            historicoFormatado += `Argumentos: ${content.arguments}\n`;
          }
        }
      }
    }
    // Adicionar o resultado da tool ao hist√≥rico
    if (tool_result_message) {
      historicoFormatado += `\n[TOOL RESULTADO]: ${tool_result_message}\n`;
    }
    if (!historicoFormatado || historicoFormatado.trim().length === 0) {
      console.log('[Finalizador] ‚ö†Ô∏è Hist√≥rico vazio ap√≥s formata√ß√£o');
      historicoFormatado = '[Conversa iniciada]';
    }
    console.log('[Finalizador] üìä Hist√≥rico formatado:');
    console.log(historicoFormatado.substring(0, 500) + '...');
    // ============================================
    // ETAPA 3: Resumir hist√≥rico com LLM
    // ============================================
    console.log('[Finalizador] ü§ñ Enviando para LLM resumir...');
    const promptResumo = `Voc√™ √© o encarregado de resumir o hist√≥rico de conversa de um aplicativo de coaching nutricional e fitness.

Voc√™ receber√° um hist√≥rico de conversa√ß√£o que precisou ser resumido para a cria√ß√£o de uma nova conversation (devido a limita√ß√µes t√©cnicas da API).

INSTRU√á√ïES CR√çTICAS:

1. **Organize de forma clara e estruturada** todos os dados sens√≠veis mencionados
2. **Seja resumido mas completo** - uma LLM deve ter no√ß√£o de TUDO que foi discutido
3. **Diferencie inten√ß√µes de a√ß√µes confirmadas**:
   - ‚ùå "O aluno perguntou o que comer no caf√©" ‚â† O aluno comeu
   - ‚úÖ "O aluno registrou o consumo de X no caf√© da manh√£" = A√ß√£o confirmada
   
4. **Identifique e marque claramente**:
   - üìä Registros alimentares CONFIRMADOS (refei√ß√µes que foram consumidas)
   - üí™ Exerc√≠cios EXECUTADOS (n√£o apenas planejados)
   - ‚ùì D√∫vidas e questionamentos do aluno
   - üí° Orienta√ß√µes dadas pelo assistente
   - üéØ Metas e objetivos mencionados
   - ‚ö†Ô∏è Problemas relatados (ex: desconforto, dores, etc)

5. **Mantenha valores num√©ricos exatos**: calorias, macros, pesos, repeti√ß√µes
6. **Preserve o contexto temporal**: "hoje", "ontem", datas espec√≠ficas
7. **Inclua o resultado de tools executadas** se houver

FORMATO DE SA√çDA:

Resumo da conversa do coaching nutricional:

[Organize em t√≥picos claros com os dados relevantes]

---

HIST√ìRICO A SER RESUMIDO:
${historicoFormatado}
`;
    const resumoResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4.1-mini',
        messages: [
          {
            role: 'user',
            content: promptResumo
          }
        ],
        temperature: 0.3,
        max_tokens: 2000
      })
    });
    if (!resumoResponse.ok) {
      const errorText = await resumoResponse.text();
      throw new Error(`Erro ao gerar resumo: ${errorText}`);
    }
    const resumoData = await resumoResponse.json();
    const resumo = resumoData.choices[0].message.content;
    console.log('[Finalizador] ‚úÖ Resumo gerado com sucesso');
    console.log('[Finalizador] üìÑ Preview do resumo:');
    console.log(resumo.substring(0, 300) + '...');
    // ============================================
    // ETAPA 4: Criar nova conversation
    // ============================================
    console.log('[Finalizador] üÜï Criando nova conversation...');
    const createConvResponse = await fetch('https://api.openai.com/v1/conversations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        metadata: {
          tipo: 'coaching_nutricional',
          migrada_de: conversation_id
        }
      })
    });
    if (!createConvResponse.ok) {
      const errorText = await createConvResponse.text();
      throw new Error(`Erro ao criar conversation: ${errorText}`);
    }
    const newConvData = await createConvResponse.json();
    const novo_conversation_id = newConvData.id;
    console.log(`[Finalizador] ‚úÖ Nova conversation criada: ${novo_conversation_id}`);
    // ============================================
    // ETAPA 5: Inserir resumo na nova conversation
    // ============================================
    console.log('[Finalizador] üìù Inserindo resumo na nova conversation...');
    const insertResumoResponse = await fetch(`https://api.openai.com/v1/conversations/${novo_conversation_id}/items`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        items: [
          {
            type: 'message',
            role: 'user',
            content: [
              {
                type: 'input_text',
                text: resumo
              }
            ]
          },
          {
            type: 'message',
            role: 'assistant',
            content: [
              {
                type: 'output_text',
                text: 'ok entendido'
              }
            ]
          }
        ]
      })
    });
    if (!insertResumoResponse.ok) {
      const errorText = await insertResumoResponse.text();
      throw new Error(`Erro ao inserir resumo: ${errorText}`);
    }
    const insertResumoData = await insertResumoResponse.json();
    console.log('[Finalizador] ‚úÖ Resumo inserido na conversation');
    console.log(`[Finalizador] üìä Items inseridos: ${insertResumoData.data?.length || 0}`);
    // ============================================
    // ETAPA 6: Retornar novo conversation_id
    // ============================================
    return new Response(JSON.stringify({
      success: true,
      novo_conversation_id: novo_conversation_id,
      conversation_id_antiga: conversation_id,
      resumo: resumo,
      mensagens_processadas: historyData.data.length,
      tokens_resumo: {
        input: resumoData.usage.prompt_tokens,
        output: resumoData.usage.completion_tokens,
        total: resumoData.usage.total_tokens
      }
    }), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      },
      status: 200
    });
  } catch (error) {
    console.error('[Finalizador] ‚ùå ERRO:', error.message);
    console.error('[Finalizador] üìã Stack:', error.stack);
    console.error('[Finalizador] üìã Error completo:', JSON.stringify(error, null, 2));
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      stack: error.stack
    }), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      },
      status: 500
    });
  }
});
