/**
 * @name webhook-wame
 * @version 1.6.0 (Prote√ß√£o contra Duplicatas)
 * @author NutriCoach AI Development
 * @date 2025-10-18
 *
 * @description
 * Endpoint de Webhook para receber mensagens do provedor `api-wa.me`.
 * VERS√ÉO COM PROTE√á√ÉO CONTRA DUPLICATAS usando messageId.
 *
 * @changelog
 * - v1.6.0:
 * - Implementada verifica√ß√£o de idempot√™ncia por messageId
 * - Adicionada tabela processed_webhook_messages para controle
 * - Preven√ß√£o de processamento m√∫ltiplo de bot√µes
 */ /**
 * @name webhook-wame
 * @version 1.7.0 (Multi-Action Switch)
 * @author NutriCoach AI Development
 * @date 2025-10-18
 *
 * @description
 * Endpoint de Webhook para receber mensagens do provedor `api-wa.me`.
 * 
 * @changelog
 * - v1.7.0: Implementado switch para m√∫ltiplas a√ß√µes de bot√µes
 *   - confirmar_update_carga
 *   - cancelar_update_carga
 *   - confirmar_registro_refeicao (NOVO)
 *   - cancelar_registro_refeicao (NOVO)
 */ /**
 * @name webhook-wame
 * @version 1.8.0 (Status Processing)
 * @author NutriCoach AI Development
 * @date 2025-10-18
 *
 * @description
 * Endpoint de Webhook para receber mensagens do provedor `api-wa.me`.
 * 
 * @changelog
 * - v1.8.0: Implementado sistema de status (processing/completed/failed)
 *   para evitar duplicatas mas permitir reprocessamento em caso de falha
 */ import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};
serve(async (req)=>{
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      headers: corsHeaders
    });
  }
  try {
    const body = await req.json();
    console.log('[WEBHOOK-WAME] ===== PAYLOAD COMPLETO RECEBIDO =====');
    console.log('[WEBHOOK-WAME] Payload bruto:', JSON.stringify(body, null, 2));
    const { instance: key, data } = body;
    // ========================================
    // VALIDA√á√ïES DEFENSIVAS
    // ========================================
    if (!key) {
      console.error('[WEBHOOK-WAME] ‚ùå Falta a chave "instance" no payload');
      throw new Error("Chave de inst√¢ncia (instance) ausente no payload");
    }
    if (!data) {
      console.error('[WEBHOOK-WAME] ‚ùå Falta o objeto "data" no payload');
      throw new Error("Objeto 'data' ausente no payload");
    }
    console.log('[WEBHOOK-WAME] ‚úÖ Valida√ß√£o inicial passou');
    // Verificar se √© mensagem de grupo
    if (data.isGroup) {
      console.log('[WEBHOOK-WAME] ‚ÑπÔ∏è Mensagem de grupo ignorada');
      return new Response('ok: group message ignored', {
        headers: corsHeaders
      });
    }
    // ========================================
    // EXTRAIR N√öMERO DO WHATSAPP
    // ========================================
    console.log('[WEBHOOK-WAME] üì± Verificando remoteJid...');
    if (!data.remoteJid) {
      console.error('[WEBHOOK-WAME] ‚ùå remoteJid n√£o encontrado');
      if (data.from) {
        console.log('[WEBHOOK-WAME] ‚ÑπÔ∏è Usando campo "from" como alternativa');
        data.remoteJid = data.from;
      } else if (data.sender) {
        console.log('[WEBHOOK-WAME] ‚ÑπÔ∏è Usando campo "sender" como alternativa');
        data.remoteJid = data.sender;
      } else {
        throw new Error("N√£o foi poss√≠vel encontrar o n√∫mero do WhatsApp");
      }
    }
    const whatsappNumber = data.remoteJid.replace(/\D/g, '');
    console.log('[WEBHOOK-WAME] ‚úÖ N√∫mero extra√≠do:', whatsappNumber);
    const supabase = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'));
    // Buscar aluno
    const { data: aluno, error: alunoError } = await supabase.from('alunos').select('id').eq('whatsapp', whatsappNumber).single();
    if (alunoError || !aluno) {
      console.warn('[WEBHOOK-WAME] ‚ö†Ô∏è Usu√°rio desconhecido. WhatsApp:', whatsappNumber);
      return new Response('ok: unknown user', {
        headers: corsHeaders
      });
    }
    console.log('[WEBHOOK-WAME] ‚úÖ Aluno encontrado. ID:', aluno.id);
    // ========================================
    // ENVIAR STATUS "ESCREVENDO..."
    // ========================================
    const presenceUrl = `https://us.api-wa.me/${key}/message/presence`;
    const presencePayload = {
      to: data.remoteJid,
      status: "composing"
    };
    console.log(`[WEBHOOK-WAME] üìù Enviando status 'composing' para ${data.remoteJid}`);
    fetch(presenceUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(presencePayload)
    }).catch((err)=>console.error("[WEBHOOK-WAME] ‚ö†Ô∏è Falha ao enviar status de presen√ßa:", err.message));
    // ========================================
    // PROCESSAR TIPO DE MENSAGEM
    // ========================================
    console.log('[WEBHOOK-WAME] üì® Tipo de mensagem:', data.messageType);
    switch(data.messageType){
      case 'conversation':
      case 'extendedTextMessage':
        {
          console.log('[WEBHOOK-WAME] üìã Estrutura de msgContent:', JSON.stringify(data.msgContent, null, 2));
          let mensagemUsuario = data.msgContent?.conversation || data.msgContent?.text || data.msgContent?.extendedTextMessage?.text || data.text || data.conversation || '';
          console.log('[WEBHOOK-WAME] Mensagem extra√≠da:', mensagemUsuario);
          if (!mensagemUsuario) {
            console.warn('[WEBHOOK-WAME] ‚ö†Ô∏è Mensagem de texto vazia');
            return new Response('ok: empty text message', {
              headers: corsHeaders
            });
          }
          const timestampMs = (data.messageTimestamp.low || data.messageTimestamp) * 1000;
          await supabase.from('mensagens_temporarias').insert({
            aluno_id: aluno.id,
            whatsapp: whatsappNumber,
            chat_id: `${whatsappNumber}@c.us`,
            mensagem: mensagemUsuario,
            tipo: 'text',
            timestamp_mensagem: new Date(timestampMs).toISOString()
          });
          console.log('[WEBHOOK-WAME] ‚úÖ Mensagem de texto inserida com sucesso');
          break;
        }
      case 'audioMessage':
        {
          const audioBase64 = data.fileBase64?.split(',')[1] || data.fileBase64;
          if (!audioBase64) {
            console.warn('[WEBHOOK-WAME] ‚ö†Ô∏è √Åudio vazio');
            return new Response('ok: empty audio message', {
              headers: corsHeaders
            });
          }
          console.log(`[WEBHOOK-WAME] üéôÔ∏è √Åudio recebido. Criando placeholder para aluno ${aluno.id}`);
          const timestampMs = (data.messageTimestamp.low || data.messageTimestamp) * 1000;
          const { data: novaMensagem, error: insertError } = await supabase.from('mensagens_temporarias').insert({
            aluno_id: aluno.id,
            whatsapp: whatsappNumber,
            chat_id: `${whatsappNumber}@c.us`,
            mensagem: "[PROCESSANDO √ÅUDIO...]",
            tipo: 'audio',
            tem_audio: true,
            audio_base64: audioBase64,
            timestamp_mensagem: new Date(timestampMs).toISOString(),
            agregado: true,
            tipo_mensagem: 'RECEBIDA'
          }).select('id').single();
          if (insertError) throw new Error(`Erro ao criar placeholder de √°udio: ${insertError.message}`);
          console.log(`[WEBHOOK-WAME] ‚úÖ Placeholder criado (ID: ${novaMensagem.id}). Disparando 'transcrever-audio'...`);
          supabase.functions.invoke('transcrever-audio', {
            body: {
              mensagem_id: novaMensagem.id
            }
          }).catch((err)=>console.error("[WEBHOOK-WAME] ‚ö†Ô∏è Erro ao invocar transcrever-audio:", err));
          break;
        }
      case 'messageContextInfo':
        {
          console.log('[WEBHOOK-WAME] üîò Resposta de bot√£o detectada');
          const buttonsResponse = data.msgContent?.buttonsResponseMessage;
          if (!buttonsResponse) {
            console.warn('[WEBHOOK-WAME] ‚ö†Ô∏è buttonsResponseMessage n√£o encontrado');
            return new Response('ok: empty button response', {
              headers: corsHeaders
            });
          }
          console.log('[WEBHOOK-WAME] selectedButtonId:', buttonsResponse.selectedButtonId);
          console.log('[WEBHOOK-WAME] selectedDisplayText:', buttonsResponse.selectedDisplayText);
          // ========================================
          // üîí PROTE√á√ÉO CONTRA DUPLICATAS COM STATUS
          // ========================================
          const messageId = data.key?.id || data.messageId;
          if (!messageId) {
            console.error('[WEBHOOK-WAME] ‚ùå messageId n√£o encontrado no payload');
            return new Response('ok: no message id', {
              headers: corsHeaders
            });
          }
          console.log('[WEBHOOK-WAME] üîç Verificando status de processamento:', messageId);
          // Verificar se j√° est√° sendo processado ou j√° foi conclu√≠do
          const { data: existingMessage } = await supabase.from('processed_webhook_messages').select('id, status').eq('message_id', messageId).single();
          if (existingMessage) {
            if (existingMessage.status === 'processing') {
              console.log('[WEBHOOK-WAME] ‚è≥ Mensagem J√Å est√° sendo processada. Ignorando.');
              return new Response(JSON.stringify({
                success: true,
                message: "Mensagem j√° est√° sendo processada"
              }), {
                headers: {
                  ...corsHeaders,
                  'Content-Type': 'application/json'
                }
              });
            }
            if (existingMessage.status === 'completed') {
              console.log('[WEBHOOK-WAME] ‚úÖ Mensagem J√Å foi processada com sucesso. Ignorando.');
              return new Response(JSON.stringify({
                success: true,
                message: "Mensagem j√° foi processada anteriormente"
              }), {
                headers: {
                  ...corsHeaders,
                  'Content-Type': 'application/json'
                }
              });
            }
            // Se status = 'failed', permite reprocessamento (n√£o faz nada, segue o fluxo)
            if (existingMessage.status === 'failed') {
              console.log('[WEBHOOK-WAME] üîÑ Mensagem falhou anteriormente. Permitindo reprocessamento.');
            }
          }
          // Registrar como "processing"
          const { error: insertError } = await supabase.from('processed_webhook_messages').insert({
            message_id: messageId,
            event_type: 'button_response',
            aluno_id: aluno.id,
            status: 'processing',
            metadata: {
              selectedButtonId: buttonsResponse.selectedButtonId,
              selectedDisplayText: buttonsResponse.selectedDisplayText,
              remoteJid: data.remoteJid
            }
          });
          if (insertError) {
            if (insertError.code === '23505') {
              console.log('[WEBHOOK-WAME] ‚è≠Ô∏è Outra inst√¢ncia j√° est√° processando. Ignorando.');
              return new Response('ok: already processing', {
                headers: corsHeaders
              });
            }
            console.error('[WEBHOOK-WAME] ‚ö†Ô∏è Erro ao registrar mensagem:', insertError);
          }
          console.log('[WEBHOOK-WAME] ‚úÖ Mensagem marcada como "processing"');
          // ========================================
          // PARSE DO JSON DO BOT√ÉO
          // ========================================
          let buttonData;
          try {
            buttonData = JSON.parse(buttonsResponse.selectedButtonId);
            console.log('[WEBHOOK-WAME] ‚úÖ Button data parseado:', buttonData);
          } catch (err) {
            console.error('[WEBHOOK-WAME] ‚ùå Erro ao fazer parse do selectedButtonId:', err.message);
            // Marcar como failed
            await supabase.from('processed_webhook_messages').update({
              status: 'failed'
            }).eq('message_id', messageId);
            throw new Error('Formato inv√°lido do buttonId');
          }
          const { action } = buttonData;
          console.log('[WEBHOOK-WAME] üéØ Action detectada:', action);
          // ========================================
          // üîÄ SWITCH PARA M√öLTIPLAS A√á√ïES
          // ========================================
          try {
            switch(action){
              // ==========================================
              // CASE 1: CONFIRMAR ATUALIZA√á√ÉO DE CARGA
              // ==========================================
              case 'confirmar_update_carga':
                {
                  console.log('[WEBHOOK-WAME] üí™ Processando confirma√ß√£o de atualiza√ß√£o de carga');
                  const { exercicio_id, nova_carga } = buttonData;
                  if (!exercicio_id || !nova_carga) {
                    console.error('[WEBHOOK-WAME] ‚ùå Dados incompletos para atualiza√ß√£o de carga');
                    break;
                  }
                  console.log('[WEBHOOK-WAME] üöÄ Acionando RPC para atualizar carga do exerc√≠cio...');
                  const { data: rpcResult, error: rpcError } = await supabase.rpc('atualizar_carga_exercicio', {
                    p_exercicio_id: exercicio_id,
                    p_aluno_id: aluno.id,
                    p_nova_carga: nova_carga,
                    p_whatsapp: whatsappNumber
                  });
                  if (rpcError) {
                    console.error('[WEBHOOK-WAME] ‚ùå Erro na RPC:', rpcError.message);
                    throw rpcError;
                  }
                  console.log('[WEBHOOK-WAME] ‚úÖ RPC executada com sucesso:', JSON.stringify(rpcResult, null, 2));
                  // Enviar confirma√ß√£o
                  const exercicioData = rpcResult?.exercicio;
                  const mensagemConfirmacao = `‚úÖ √ìtimo! Sua carga foi atualizada com sucesso!

*${exercicioData?.nome || 'Exerc√≠cio'}*
${exercicioData?.carga_anterior}kg ‚Üí *${exercicioData?.carga_nova}kg* üí™

Vamos l√°! Essa carga extra vai fazer voc√™ ficar ainda mais forte nos pr√≥ximos treinos! üöÄ`;
                  console.log('[WEBHOOK-WAME] üì± Enviando confirma√ß√£o via WhatsApp...');
                  const textUrl = `https://us.api-wa.me/${key}/message/text`;
                  fetch(textUrl, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      to: whatsappNumber,
                      text: mensagemConfirmacao
                    })
                  }).then(()=>{
                    console.log('[WEBHOOK-WAME] ‚úÖ Mensagem de confirma√ß√£o enviada');
                  }).catch((err)=>{
                    console.error('[WEBHOOK-WAME] ‚ö†Ô∏è Erro ao enviar mensagem de confirma√ß√£o:', err.message);
                  });
                  break;
                }
              // ==========================================
              // CASE 2: CANCELAR ATUALIZA√á√ÉO DE CARGA
              // ==========================================
              case 'cancelar_update_carga':
                {
                  console.log('[WEBHOOK-WAME] ‚ÑπÔ∏è Usu√°rio cancelou a atualiza√ß√£o de carga');
                  const mensagemCancelamento = `Sem problema! üëç Sua carga foi mantida como estava. Se quiser mudar depois, √© s√≥ nos avisar!`;
                  const textUrl = `https://us.api-wa.me/${key}/message/text`;
                  fetch(textUrl, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      to: whatsappNumber,
                      text: mensagemCancelamento
                    })
                  }).catch((err)=>console.error("[WEBHOOK-WAME] ‚ö†Ô∏è Erro ao enviar cancelamento:", err.message));
                  break;
                }
              // ==========================================
              // CASE 3: CONFIRMAR REGISTRO DE REFEI√á√ÉO
              // ==========================================
              case 'confirmar_registro_refeicao':
                {
                  console.log('[WEBHOOK-WAME] üçΩÔ∏è Processando confirma√ß√£o de registro de refei√ß√£o');
                  const { registro_id } = buttonData;
                  if (!registro_id) {
                    console.error('[WEBHOOK-WAME] ‚ùå registro_id ausente');
                    throw new Error('registro_id √© obrigat√≥rio');
                  }
                  console.log('[WEBHOOK-WAME] üöÄ Acionando RPC processar_confirmacao_refeicao...');
                  const { data: rpcResult, error: rpcError } = await supabase.rpc('processar_confirmacao_refeicao', {
                    p_registro_id: registro_id,
                    p_confirmar: true
                  });
                  if (rpcError) {
                    console.error('[WEBHOOK-WAME] ‚ùå Erro na RPC:', rpcError.message);
                    throw rpcError;
                  }
                  console.log('[WEBHOOK-WAME] ‚úÖ Refei√ß√£o confirmada com sucesso:', JSON.stringify(rpcResult, null, 2));
                  // Enviar confirma√ß√£o
                  const mensagemConfirmacao = `‚úÖ Refei√ß√£o registrada com sucesso! üéâ

Seus macros foram atualizados e eu j√° estou acompanhando seu progresso de hoje.

Continue assim! üí™`;
                  const textUrl = `https://us.api-wa.me/${key}/message/text`;
                  fetch(textUrl, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      to: whatsappNumber,
                      text: mensagemConfirmacao
                    })
                  }).catch((err)=>console.error("[WEBHOOK-WAME] ‚ö†Ô∏è Erro ao enviar confirma√ß√£o:", err.message));
                  break;
                }
              // ==========================================
              // CASE 4: CANCELAR REGISTRO DE REFEI√á√ÉO
              // ==========================================
              case 'cancelar_registro_refeicao':
                {
                  console.log('[WEBHOOK-WAME] üóëÔ∏è Processando cancelamento de registro de refei√ß√£o');
                  const { registro_id } = buttonData;
                  if (!registro_id) {
                    console.error('[WEBHOOK-WAME] ‚ùå registro_id ausente');
                    throw new Error('registro_id √© obrigat√≥rio');
                  }
                  console.log('[WEBHOOK-WAME] üöÄ Acionando RPC processar_confirmacao_refeicao (cancelar)...');
                  const { data: rpcResult, error: rpcError } = await supabase.rpc('processar_confirmacao_refeicao', {
                    p_registro_id: registro_id,
                    p_confirmar: false
                  });
                  if (rpcError) {
                    console.error('[WEBHOOK-WAME] ‚ùå Erro na RPC:', rpcError.message);
                    throw rpcError;
                  }
                  console.log('[WEBHOOK-WAME] ‚úÖ Refei√ß√£o cancelada com sucesso:', JSON.stringify(rpcResult, null, 2));
                  // Enviar confirma√ß√£o
                  const mensagemCancelamento = `Ok! üëç Registro cancelado.

Quando quiser registrar suas refei√ß√µes, √© s√≥ me avisar o que voc√™ comeu!`;
                  const textUrl = `https://us.api-wa.me/${key}/message/text`;
                  fetch(textUrl, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      to: whatsappNumber,
                      text: mensagemCancelamento
                    })
                  }).catch((err)=>console.error("[WEBHOOK-WAME] ‚ö†Ô∏è Erro ao enviar cancelamento:", err.message));
                  break;
                }
              // ==========================================
              // DEFAULT: ACTION N√ÉO RECONHECIDA
              // ==========================================
              default:
                {
                  console.warn('[WEBHOOK-WAME] ‚ö†Ô∏è Action desconhecida:', action);
                  console.warn('[WEBHOOK-WAME] Button data completo:', JSON.stringify(buttonData, null, 2));
                }
            }
            // üëâ SE CHEGOU AT√â AQUI SEM ERRO = SUCESSO
            await supabase.from('processed_webhook_messages').update({
              status: 'completed'
            }).eq('message_id', messageId);
            console.log('[WEBHOOK-WAME] ‚úÖ Status atualizado para "completed"');
          } catch (actionError) {
            // üëâ SE DEU ERRO NO PROCESSAMENTO = FAILED
            console.error('[WEBHOOK-WAME] ‚ùå Erro ao processar action:', actionError.message);
            await supabase.from('processed_webhook_messages').update({
              status: 'failed'
            }).eq('message_id', messageId);
            console.log('[WEBHOOK-WAME] ‚ö†Ô∏è Status atualizado para "failed"');
            throw actionError; // Re-throw para o catch externo
          }
        }
      default:
        {
          console.warn('[WEBHOOK-WAME] ‚ö†Ô∏è Tipo de mensagem n√£o suportado:', data.messageType);
          return new Response('ok: unsupported message type', {
            headers: corsHeaders
          });
        }
    }
    console.log('[WEBHOOK-WAME] ‚úÖ Webhook processado com sucesso');
    return new Response(JSON.stringify({
      success: true,
      message: "Mensagem recebida."
    }), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('üî• Erro no Webhook API-WA.ME:', error.message);
    console.error('üî• Stack:', error.stack);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: corsHeaders
    });
  }
});
